datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String                     @id @default(cuid())
  email               String                     @unique
  emailVerified       Boolean                    @default(false)
  password            String
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt()
  otpSecret           String?
  passwordResets      PasswordReset[]
  emailVerifications  EmailVerification[]
  refreshToken        String?
  role                Role                       @default(USER)
  passwordChangedAt   DateTime                   @default(now())
  forcePasswordReset  Boolean                    @default(false)
  failedLoginAttempts Int                        @default(0)
  lockUntil           DateTime?

  /** relations **/
  parentProfile         ParentProfile?
  childProfile          Child?                     @relation(name: "ChildToUser")
  secretaryProfile      SecretaryProfile?
  directorProfile       DirectorProfile?
  serviceManagerProfile ServiceManagerProfile?
  staffProfile          StaffProfile?

  /** référents (many-to-many) **/
  referentOf            Child[]                    @relation("ChildReferents")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  TEACHER
  CHILD
  PARENT
  SECRETARY
  DIRECTOR
  SERVICE_MANAGER
  STAFF   // tous les intervenants (éducateurs, psy, etc.)
}

enum Discipline {
  EDUCATOR
  TECH_EDUCATOR
  PSYCHOLOGIST
  PSYCHIATRIST
  ORTHOPEDIST
}

model ParentProfile {
  id                  Int               @id @default(autoincrement())
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String            @unique

  firstName           String
  lastName            String
  phone               String
  address             String
  legalResponsibility String
  notificationPrefs   Json              @default("{}")

  emergencyContacts   EmergencyContact[]
  children            Child[]

  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt()
}

/*──────────────────────────────  CHILD  ────────────────────────────*/
model Child {
  id               Int             @id @default(autoincrement())
  firstName        String
  lastName         String
  birthDate        DateTime
  condition        String?

  parent           ParentProfile   @relation(fields: [parentProfileId], references: [id], onDelete: Cascade)
  parentProfileId  Int

  user             User?           @relation(name: "ChildToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId           String?         @unique

  /** plusieurs référents possibles **/
  referents        User[]          @relation("ChildReferents")

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt()
}

/*───────────────────────  EMERGENCY CONTACT  ───────────────────────*/
model EmergencyContact {
  id               Int             @id @default(autoincrement())
  name             String
  relation         String
  phone            String
  parent           ParentProfile   @relation(fields: [parentProfileId], references: [id], onDelete: Cascade)
  parentProfileId  Int
}

/*──────────────────────── SECRETARY PROFILE ─────────────────────────*/
model SecretaryProfile {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  jobTitle     String
  startDate    DateTime
  profileImage String?
  firstName    String
  lastName     String
  birthDate    DateTime
  phone        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

/*──────────────────────── DIRECTOR PROFILE ─────────────────────────*/
model DirectorProfile {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  jobTitle     String
  startDate    DateTime
  profileImage String?
  firstName    String
  lastName     String
  birthDate    DateTime
  phone        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

/*─────────────────── SERVICE MANAGER PROFILE ───────────────────────*/
model ServiceManagerProfile {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  jobTitle     String
  startDate    DateTime
  profileImage String?
  firstName    String
  lastName     String
  birthDate    DateTime
  phone        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

/*───────────────────────── STAFF PROFILE ───────────────────────────*/
model StaffProfile {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String     @unique
  discipline  Discipline
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()
}
