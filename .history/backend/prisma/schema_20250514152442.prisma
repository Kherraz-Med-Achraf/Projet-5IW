// ─── EXISTANT ───────────────────────────────────────────────────────────────────
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  password            String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  otpSecret           String?
  passwordResets      PasswordReset[]
  refreshToken        String?
  role                Role      @default(USER)
  passwordChangedAt   DateTime  @default(now())
  forcePasswordReset  Boolean   @default(false)
  failedLoginAttempts Int       @default(0)
  lockUntil           DateTime?

  // ↓ 1–1 vers le nouveau profil parent (facultatif pour ADMIN/TEACHER)
  parentProfile       ParentProfile?
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  TEACHER
}

// ─── NOUVEAU : PROFIL DU PARENT ────────────────────────────────────────────────
model ParentProfile {
  id                 Int                 @id @default(autoincrement())
  user               User                @relation(fields: [userId], references: [id])
  userId             String              @unique      // 1-1 avec User

  firstName          String
  lastName           String
  phone              String
  address            String
  legalResponsibility String
  notificationPrefs  Json                @default("{}")

  emergencyContacts  EmergencyContact[]
  children           Child[]

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

// ─── ENFANT(S) ──────────────────────────────────────────────────────────────────
model Child {
  id          Int            @id @default(autoincrement())
  firstName   String
  lastName    String
  birthDate   DateTime
  condition   String?

  parent      ParentProfile  @relation(fields: [parentProfileId], references: [id])
  parentProfileId Int
}

// ─── CONTACT(S) D’URGENCE ───────────────────────────────────────────────────────
model EmergencyContact {
  id          Int            @id @default(autoincrement())
  name        String
  relation    String
  phone       String

  parent      ParentProfile  @relation(fields: [parentProfileId], references: [id])
  parentProfileId Int
}
