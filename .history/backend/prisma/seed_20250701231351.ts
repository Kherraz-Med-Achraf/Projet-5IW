import { PrismaClient, Role, Discipline } from '@prisma/client';
import * as bcrypt from 'bcrypt';
import { faker } from '@faker-js/faker';

// Assurer un comportement d√©terministe
faker.seed(123456);

const prisma = new PrismaClient();
const HASH_ROUNDS = 10;
const DEFAULT_PWD = 'Test1234!!!!';
// Sel statique pour produire un hash constant
const STATIC_SALT = '$2b$10$C6UzMDM.H6dfI/f/IKcEe.';
const DEFAULT_HASHED_PWD = bcrypt.hashSync(DEFAULT_PWD, STATIC_SALT);

async function hash(pwd: string) {
  // Retourne toujours le m√™me hash pour DEFAULT_PWD
  if (pwd === DEFAULT_PWD) return DEFAULT_HASHED_PWD;
  return bcrypt.hash(pwd, STATIC_SALT);
}

/* Helpers ----------------------------------------------------------------- */
function initialEmail(first: string, last: string, index = 0) {
  const base = `${first[0].toLowerCase()}${last.toLowerCase()}`;
  return index ? `${base}${index}@gmail.com` : `${base}@gmail.com`;
}

async function uniqueStaffEmail(first: string, last: string) {
  let idx = 0;
  while (true) {
    const mail = initialEmail(first, last, idx);
    const exists = await prisma.user.findUnique({ where: { email: mail } });
    if (!exists) return mail;
    idx += 1;
  }
}

/* Seed -------------------------------------------------------------------- */
async function main() {
  console.log('üå± D√©marrage du seed avec g√©n√©ration dynamique des donn√©es...');
  console.log(`üìÖ Les pr√©sences seront g√©n√©r√©es de 2024 jusqu'√† la veille d'aujourd'hui (${new Date(Date.now() - 24*60*60*1000).toLocaleDateString('fr-FR')})`);
  console.log('');

  /* ---------------------------------------------------------------------- */
  /* 1. ADMIN (si n√©cessaire)                                               */
  /* ---------------------------------------------------------------------- */
  const adminExists = await prisma.user.findFirst({ where: { role: Role.ADMIN } });
  if (!adminExists) {
    await prisma.user.create({
      data: {
        email: 'admin@example.com',
        password: await hash('MonMotDePasse123!'),
        role: Role.ADMIN,
        emailVerified: true,
      },
    });
    console.log('‚úÖ Admin cr√©√© ‚Üí admin@example.com / MonMotDePasse123!');
  } else {
    console.log('‚ÑπÔ∏è  Admin d√©j√† pr√©sent, pas recr√©√©');
  }

  /* ---------------------------------------------------------------------- */
  /* 2. DIRECTOR                                                            */
  /* ---------------------------------------------------------------------- */
  const directorMail = 'apajh94.direction@gmail.com';
  if (!(await prisma.user.findUnique({ where: { email: directorMail } }))) {
    const usr = await prisma.user.create({
      data: {
        email: directorMail,
        password: await hash(DEFAULT_PWD),
        role: Role.DIRECTOR,
        emailVerified: true,
        directorProfile: {
          create: {
            firstName: 'Jean',
            lastName: 'Direction',
            phone: '06' + faker.string.numeric(8),
            birthDate: faker.date.birthdate({ min: 35, max: 55, mode: 'age' }),
            jobTitle: 'Directeur',
            startDate: faker.date.past({ years: 5 }),
          },
        },
      },
    });
    console.log('‚úÖ Director cr√©√© ‚Üí', usr.email);
  }

  /* ---------------------------------------------------------------------- */
  /* 3. SERVICE_MANAGER x2                                                  */
  /* ---------------------------------------------------------------------- */
  const smMails = ['apajh94.cs@gmail.com', 'apajh94.cs2@gmail.com'];
  for (const mail of smMails) {
    if (!(await prisma.user.findUnique({ where: { email: mail } }))) {
      const usr = await prisma.user.create({
        data: {
          email: mail,
          password: await hash(DEFAULT_PWD),
          role: Role.SERVICE_MANAGER,
          emailVerified: true,
          serviceManagerProfile: {
            create: {
              firstName: faker.person.firstName(),
              lastName: faker.person.lastName(),
              phone: '06' + faker.string.numeric(8),
              jobTitle: 'Chef¬∑fe de service',
              startDate: faker.date.past({ years: 3 }),
              birthDate: faker.date.birthdate({ min: 30, max: 55, mode: 'age' }),
            },
          },
        },
      });
      console.log('‚úÖ Service-manager cr√©√© ‚Üí', usr.email);
    }
  }

  /* ---------------------------------------------------------------------- */
  /* 4. SECRETARY x1                                                        */
  /* ---------------------------------------------------------------------- */
  const secMail = 'apajh94.secretary@gmail.com';
  if (!(await prisma.user.findUnique({ where: { email: secMail } }))) {
    const usr = await prisma.user.create({
      data: {
        email: secMail,
        password: await hash(DEFAULT_PWD),
        role: Role.SECRETARY,
        emailVerified: true,
        secretaryProfile: {
          create: {
            firstName: faker.person.firstName(),
            lastName: faker.person.lastName(),
            phone: '06' + faker.string.numeric(8),
            birthDate: faker.date.birthdate({ min: 25, max: 45, mode: 'age' }),
            specialty: 'Secr√©tariat g√©n√©ral',
            startDate: faker.date.past({ years: 2 }),
          },
        },
      },
    });
    console.log('‚úÖ Secretary cr√©√© ‚Üí', usr.email);
  }

  /* ---------------------------------------------------------------------- */
  /* 5. STAFF                                                               */
  /* ---------------------------------------------------------------------- */
  type StaffSpec = { qty: number; discipline: Discipline };
  const staffSpecs: StaffSpec[] = [
    { qty: 5, discipline: Discipline.EDUCATOR },
    { qty: 5, discipline: Discipline.TECH_EDUCATOR },
    { qty: 1, discipline: Discipline.PSYCHOLOGIST },
    { qty: 1, discipline: Discipline.PSYCHIATRIST },
    { qty: 1, discipline: Discipline.ORTHOPEDIST },
  ];

  for (const { qty, discipline } of staffSpecs) {
    for (let i = 0; i < qty; i++) {
      const first = faker.person.firstName();
      const last = faker.person.lastName();
      const email = await uniqueStaffEmail(first, last);

      await prisma.user.create({
        data: {
          email,
          password: await hash(DEFAULT_PWD),
          role: Role.STAFF,
          emailVerified: true,
          staffProfile: {
            create: {
              firstName: first,
              lastName: last,
              phone: '06' + faker.string.numeric(8),
              birthDate: faker.date.birthdate({ min: 25, max: 55, mode: 'age' }),
              discipline,
              specialty: discipline === Discipline.EDUCATOR ? 'G√©n√©ral' : undefined,
            },
          },
        },
      });
    }
    console.log(`‚úÖ ${qty} staff ${discipline} cr√©√©s`);
  }

  /* ---------------------------------------------------------------------- */
  /* 6. PARENTS + CHILDREN                                                  */
  /* ---------------------------------------------------------------------- */
  const totalParents = 40; // 35 with 1 child, 5 with 2
  for (let p = 0; p < totalParents; p++) {
    const firstP = faker.person.firstName();
    const lastP = faker.person.lastName();
    const email = `parent${p + 1}@example.com`;

    const childCount = p < 35 ? 1 : 2;
    const childrenData = Array.from({ length: childCount }).map(() => ({
      firstName: faker.person.firstName(),
      lastName: lastP,
      birthDate: faker.date.birthdate({ min: 9, max: 14, mode: 'age' }),
    }));

    await prisma.user.create({
      data: {
        email,
        password: await hash(DEFAULT_PWD),
        role: Role.PARENT,
        emailVerified: true,
        parentProfile: {
          create: {
            firstName: firstP,
            lastName: lastP,
            phone: '06' + faker.string.numeric(8),
            address: faker.location.streetAddress(),
            legalResponsibility: 'P√®re/M√®re',
            notificationPrefs: {},
            emergencyContacts: {
              create: [{
                name: faker.person.fullName(),
                phone: '06' + faker.string.numeric(8),
                relation: 'Tante',
              }],
            },
            children: { create: childrenData },
          },
        },
      },
    });
  }
  console.log('‚úÖ Parents + enfants cr√©√©s');

  /* ---------------------------------------------------------------------- */
  /* 7. ANN√âES SCOLAIRES                                                    */
  /* ---------------------------------------------------------------------- */
  const existingYears = await prisma.academicYear.findMany({
    where: { label: { in: ['2023-2024', '2024-2025', '2025-2026', '2026-2027', '2027-2028'] } },
    select: { label: true },
  });
  const existingLabels = existingYears.map(y => y.label);
  const yearsToCreate = [
    { label: '2023-2024', startDate: new Date('2023-09-01'), endDate: new Date('2024-08-31') },
    { label: '2024-2025', startDate: new Date('2024-09-01'), endDate: new Date('2025-08-31') },
    { label: '2025-2026', startDate: new Date('2025-09-01'), endDate: new Date('2026-08-31') },
    { label: '2026-2027', startDate: new Date('2026-09-01'), endDate: new Date('2027-08-31') },
    { label: '2027-2028', startDate: new Date('2027-09-01'), endDate: new Date('2028-08-31') },
  ].filter(y => !existingLabels.includes(y.label));

  for (const yr of yearsToCreate) {
    await prisma.academicYear.create({ data: yr });
    console.log(`‚úÖ Ann√©e scolaire ins√©r√©e : ${yr.label}`);
  }

  /* ---------------------------------------------------------------------- */
  /* 7-bis. SEMESTRES                                                       */
  /* ---------------------------------------------------------------------- */
  const allYears = await prisma.academicYear.findMany();

  for (const ay of allYears) {
    const [startYear, endYear] = ay.label.split('-').map(Number);
    const sem1Name = `${ay.label} S1`;
    const sem2Name = `${ay.label} S2`;

    const sem1Exists = await prisma.semester.findFirst({ where: { name: sem1Name } });
    const sem2Exists = await prisma.semester.findFirst({ where: { name: sem2Name } });

    if (!sem1Exists) {
      await prisma.semester.create({
        data: {
          name: sem1Name,
          startDate: new Date(`${startYear}-09-01`),
          endDate: new Date(`${startYear + 1}-01-31`),
        },
      });
      console.log(`‚úÖ Semestre cr√©√© : ${sem1Name}`);
    }

    if (!sem2Exists) {
      await prisma.semester.create({
        data: {
          name: sem2Name,
          startDate: new Date(`${startYear + 1}-02-01`),
          endDate: new Date(`${startYear + 1}-08-31`),
        },
      });
      console.log(`‚úÖ Semestre cr√©√© : ${sem2Name}`);
    }
  }

  /* ---------------------------------------------------------------------- */
  /* 8. R√âF√âRENTS                                                            */
  /* ---------------------------------------------------------------------- */
  const allChildren = await prisma.child.findMany({ select: { id: true } });
  const allStaff = await prisma.user.findMany({ where: { role: Role.STAFF }, select: { id: true } });

  let staffIndex = 0;
  let countForCurrent = 0;
  const maxPerStaff = 5;

  for (const child of allChildren) {
    const referentId = allStaff[staffIndex]?.id;
    if (referentId) {
      await prisma.child.update({ where: { id: child.id }, data: { referents: { connect: { id: referentId } } } });
      countForCurrent++;
      if (countForCurrent >= maxPerStaff) {
        staffIndex = Math.min(staffIndex + 1, allStaff.length - 1);
        countForCurrent = 0;
      }
    }
  }
  console.log('‚úÖ R√©f√©rents assign√©s');

  /* ---------------------------------------------------------------------- */
  /* 9. PR√âSENCES & JUSTIFICATIONS (2024 ‚Üí veille d'aujourd'hui)             */
  /* ---------------------------------------------------------------------- */
  const staffIds = allStaff.map(u => u.id);
  let staffCursor = 0;
  function nextStaffId() { const id = staffIds[staffCursor]; staffCursor = (staffCursor + 1) % staffIds.length; return id; }

  // Calcul dynamique : du 1er janvier 2024 jusqu'√† la veille d'aujourd'hui
  const start = new Date('2024-01-01');
  const today = new Date();
  const yesterday = new Date(today);
  yesterday.setDate(today.getDate() - 1);
  const end = yesterday;
  
  console.log(`‚ÑπÔ∏è  DEBUG: Aujourd'hui = ${today.toLocaleDateString('fr-FR')}`);
  console.log(`‚ÑπÔ∏è  DEBUG: Hier = ${yesterday.toLocaleDateString('fr-FR')}`);
  console.log(`‚ÑπÔ∏è  G√©n√©ration des pr√©sences de ${start.toLocaleDateString('fr-FR')} √† ${end.toLocaleDateString('fr-FR')}`);
  
  // V√©rification que la p√©riode est valide
  if (end < start) {
    console.log('‚ö†Ô∏è  Aucune pr√©sence √† g√©n√©rer : date de fin ant√©rieure √† la date de d√©but');
    return;
  }

  for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
    // G√©n√©ration pour TOUS les jours (y compris weekends)
    const sheet = await prisma.presenceSheet.upsert({ where: { date: d }, create: { date: d, staffId: nextStaffId(), status: 'PENDING_SECRETARY', validatedAtStaff: faker.date.between({ from: new Date(d.getTime() - 2*3600000), to: new Date(d.getTime() - 1800000) }) }, update: {} });
    for (const { id: childId } of allChildren) {
      const isPresent = faker.number.float({ min: 0, max: 1, fractionDigits: 2 }) < 0.7;
      const record = await prisma.presenceRecord.create({ data: { sheetId: sheet.id, childId, present: isPresent } });
      if (!isPresent && faker.datatype.boolean()) {
        const type = faker.helpers.arrayElement(['ABSENCE','LATENESS'] as const);
        await prisma.absenceJustification.create({ data: { recordId: record.id, type, justificationDate: d, motif: type==='ABSENCE' ? faker.helpers.arrayElement(['Certificat m√©dical','RDV familial','Cong√© exceptionnel']) : '', filePath: faker.datatype.boolean() ? `uploads/justifications/${faker.string.uuid()}.pdf` : null } });
      }
    }
  }
  console.log(`‚úÖ Pr√©sences & justifications g√©n√©r√©es (${start.toLocaleDateString('fr-FR')} ‚Üí ${end.toLocaleDateString('fr-FR')})`);

  /* ---------------------------------------------------------------------- */
  /* 10. MISSIONS ET JOURNAUX MENSUELS                                     */
  /* ---------------------------------------------------------------------- */
  console.log('üå± G√©n√©ration des missions et journaux mensuels...');
  
  // R√©cup√©rer toutes les ann√©es scolaires
  const academicYears = await prisma.academicYear.findMany({ orderBy: { startDate: 'asc' } });
  
  // Missions types IME
  const missionTemplates = [
    "D√©velopper l'autonomie dans les gestes de la vie quotidienne",
    "Am√©liorer les comp√©tences en communication et expression",
    "Renforcer les apprentissages scolaires fondamentaux",
    "D√©velopper les habilet√©s sociales et relationnelles",
    "Travailler sur la gestion des √©motions et du comportement",
    "Am√©liorer la motricit√© fine et globale",
    "D√©velopper la confiance en soi et l'estime de soi",
    "Acqu√©rir des comp√©tences pr√©professionnelles",
    "Favoriser l'inclusion et la socialisation",
    "D√©velopper la cr√©ativit√© et l'expression artistique"
  ];

  // Contenus types pour les journaux mensuels
  const journalTemplates = [
    "Ce mois-ci, l'enfant a montr√© des progr√®s significatifs dans ses apprentissages. Il participe activement aux ateliers √©ducatifs et d√©montre une meilleure concentration.",
    "L'enfant a travaill√© sur l'autonomie au quotidien. On observe une am√©lioration dans la gestion de ses affaires personnelles et une plus grande ind√©pendance.",
    "Bonne participation aux activit√©s de groupe. L'enfant d√©veloppe ses comp√©tences sociales et s'investit davantage dans les projets collectifs.",
    "Ce mois a √©t√© marqu√© par un travail sp√©cifique sur la communication. L'enfant s'exprime de mieux en mieux et interagit positivement avec ses pairs.",
    "L'enfant a b√©n√©fici√© d'un accompagnement individualis√© qui porte ses fruits. On note une √©volution positive dans son comportement et sa motivation.",
    "Participation assidue aux ateliers cr√©atifs et sportifs. L'enfant d√©couvre de nouveaux centres d'int√©r√™t et d√©veloppe ses talents.",
    "Travail approfondi sur les apprentissages scolaires. L'enfant progresse √† son rythme et gagne en confiance dans ses capacit√©s.",
    "Ce mois a permis de consolider les acquis pr√©c√©dents. L'enfant maintient ses efforts et continue sa progression dans tous les domaines."
  ];

  // G√©n√©rer les missions pour chaque enfant
  for (const year of academicYears) {
    for (const child of allChildren) {
      const existingMissions = await prisma.mission.findMany({
        where: { childId: child.id, academicYearId: year.id }
      });
      
      if (existingMissions.length === 0) {
        // G√©n√©rer 3-5 missions par enfant par ann√©e
        const missionCount = faker.number.int({ min: 3, max: 5 });
        const selectedMissions = faker.helpers.arrayElements(missionTemplates, missionCount);
        
        for (const missionDesc of selectedMissions) {
          await prisma.mission.create({
            data: {
              description: missionDesc,
              childId: child.id,
              academicYearId: year.id
            }
          });
        }
      }
    }
  }
  console.log('‚úÖ Missions cr√©√©es pour tous les enfants');

  // G√©n√©rer les journaux mensuels selon l'ordre de l'ann√©e scolaire
  const currentDate = new Date();
  const currentYear = currentDate.getFullYear();
  const currentMonth = currentDate.getMonth() + 1; // getMonth() retourne 0-11
  
  // Calculer les p√©riodes √† couvrir selon l'ordre scolaire (septembre ‚Üí ao√ªt)
  const periods: { year: number; month: number; academicYear: string }[] = [];
  
  // D√©terminer l'ann√©e scolaire actuelle
  const currentAcademicYear = currentMonth >= 9 ? `${currentYear}-${currentYear + 1}` : `${currentYear - 1}-${currentYear}`;
  
  // G√©n√©rer les journaux pour l'ann√©e scolaire pr√©c√©dente compl√®te (septembre ‚Üí ao√ªt)
  const previousAcademicYear = currentMonth >= 9 ? `${currentYear - 1}-${currentYear}` : `${currentYear - 2}-${currentYear - 1}`;
  const [prevStartYear, prevEndYear] = previousAcademicYear.split('-').map(Number);
  
  // Septembre √† d√©cembre de l'ann√©e scolaire pr√©c√©dente
  for (let month = 9; month <= 12; month++) {
    periods.push({ year: prevStartYear, month, academicYear: previousAcademicYear });
  }
  // Janvier √† ao√ªt de l'ann√©e scolaire pr√©c√©dente
  for (let month = 1; month <= 8; month++) {
    periods.push({ year: prevEndYear, month, academicYear: previousAcademicYear });
  }
  
  // G√©n√©rer les journaux pour l'ann√©e scolaire actuelle jusqu'au mois pr√©c√©dent
  const [currentStartYear, currentEndYear] = currentAcademicYear.split('-').map(Number);
  
  if (currentMonth >= 9) {
    // Nous sommes apr√®s septembre, g√©n√©rer de septembre au mois pr√©c√©dent
    for (let month = 9; month < currentMonth; month++) {
      periods.push({ year: currentYear, month, academicYear: currentAcademicYear });
    }
  } else {
    // Nous sommes avant septembre, g√©n√©rer septembre-d√©cembre de l'ann√©e pr√©c√©dente + janvier au mois pr√©c√©dent de cette ann√©e
    for (let month = 9; month <= 12; month++) {
      periods.push({ year: currentStartYear, month, academicYear: currentAcademicYear });
    }
    for (let month = 1; month < currentMonth; month++) {
      periods.push({ year: currentYear, month, academicYear: currentAcademicYear });
    }
  }
  
  console.log(`‚ÑπÔ∏è  G√©n√©ration des journaux pour ${periods.length} mois dans l'ordre scolaire :`);
  console.log(`   - Ann√©e scolaire ${previousAcademicYear} : septembre √† ao√ªt (12 mois)`);
  console.log(`   - Ann√©e scolaire ${currentAcademicYear} : jusqu'au mois pr√©c√©dent (${periods.filter(p => p.academicYear === currentAcademicYear).length} mois)`);
  
  // Affichage d√©taill√© pour debug
  const monthNames = ['', 'Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre'];
  console.log(`‚ÑπÔ∏è  D√©tail des mois g√©n√©r√©s :`);
  periods.forEach(p => {
    console.log(`     ${monthNames[p.month]} ${p.year} (${p.academicYear})`);
  });

  // Obtenir tous les staff comme √©ducateurs potentiels
  const allEducators = await prisma.user.findMany({
    where: { role: Role.STAFF },
    select: { id: true }
  });

  if (allEducators.length === 0) {
    console.log('‚ö†Ô∏è  Aucun staff trouv√© pour assigner comme √©ducateur');
  } else {
    let educatorIndex = 0;
    let journalsCreated = 0;
    
    for (const child of allChildren) {
      // Assigner un √©ducateur principal √† cet enfant
      const assignedEducator = allEducators[educatorIndex % allEducators.length];
      educatorIndex++;
      
      // G√©n√©rer pour chaque p√©riode (dans l'ordre scolaire : septembre ‚Üí ao√ªt)
      for (const { year, month, academicYear: academicYearLabel } of periods) {
        // Trouver l'ann√©e scolaire correspondante
        const academicYear = academicYears.find(ay => ay.label === academicYearLabel);
        
        if (!academicYear) {
          console.log(`‚ö†Ô∏è  Ann√©e scolaire ${academicYearLabel} non trouv√©e pour ${month}/${year}`);
          continue;
        }
        
        // V√©rifier si le journal existe d√©j√†
        const existingJournal = await prisma.journalMensuel.findFirst({
          where: {
            childId: child.id,
            academicYearId: academicYear.id,
            month: month
          }
        });
        
        if (!existingJournal) {
          // R√©cup√©rer les missions de l'enfant pour cette ann√©e
          const childMissions = await prisma.mission.findMany({
            where: { childId: child.id, academicYearId: academicYear.id }
          });
          
          // Cr√©er un objet de progression des missions
          const progressionMissions = childMissions.reduce((acc, mission) => {
            acc[mission.id] = {
              progression: faker.helpers.arrayElement([
                "En cours de travail",
                "Objectif en cours d'acquisition",
                "Progr√®s observ√©s",
                "Objectif partiellement atteint",
                "Objectif atteint"
              ]),
              commentaire: faker.helpers.arrayElement([
                "L'enfant montre de l'int√©r√™t et s'investit dans cette mission.",
                "Des progr√®s sont observ√©s, il faut poursuivre les efforts.",
                "Cette mission n√©cessite un accompagnement renforc√©.",
                "L'enfant a bien int√©gr√© les objectifs de cette mission.",
                "Excellent travail, l'enfant d√©passe nos attentes."
              ])
            };
            return acc;
          }, {});
          
          // D√©terminer le statut du journal (draft ou submitted)
          const isDraft = faker.datatype.boolean(0.3); // 30% de chance d'√™tre en draft
          const isSubmitted = !isDraft && faker.datatype.boolean(0.8); // 80% des non-drafts sont soumis
          
          await prisma.journalMensuel.create({
            data: {
              childId: child.id,
              educatorId: assignedEducator.id,
              academicYearId: academicYear.id,
              month: month,
              isDraft: isDraft,
              isSubmitted: isSubmitted,
              submittedAt: isSubmitted ? faker.date.between({
                from: new Date(year, month - 1, 20), // vers le 20 du mois
                to: new Date(year, month, 5) // jusqu'au 5 du mois suivant
              }) : null,
              contenu: faker.helpers.arrayElement(journalTemplates),
              progressionMissions: progressionMissions
            }
          });
          
          journalsCreated++;
        }
      }
    }
    console.log(`‚úÖ ${journalsCreated} journaux mensuels cr√©√©s pour tous les enfants`);
  }
}

main().then(() => console.log('üå± Seed termin√©')).catch((e) => { console.error(e); process.exit(1); }).finally(async () => { await prisma.$disconnect(); });
