console.log('üß™ TEST RAPIDE - Format Invitation');
console.log('==================================');
console.log('');

console.log('üìã UTILISEZ CE CODE DANS LA CONSOLE NAVIGATEUR:');
console.log('===============================================');
console.log('');

const testCode = `
// üß™ Fonction de test pour invitation
function testInvitation(email, roleToAssign) {
  console.log('üîç Test validation invitation:');
  console.log('==============================');
  
  // Validation email
  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
  const isValidEmail = emailRegex.test(email);
  console.log('üìß Email:', email);
  console.log('‚úÖ Email valide:', isValidEmail);
  
  // Validation r√¥le
  const validRoles = ['USER', 'ADMIN', 'TEACHER', 'CHILD', 'PARENT', 'SECRETARY', 'DIRECTOR', 'SERVICE_MANAGER', 'STAFF'];
  const isValidRole = validRoles.includes(roleToAssign);
  console.log('üé≠ R√¥le:', roleToAssign);
  console.log('‚úÖ R√¥le valide:', isValidRole);
  
  // Payload final
  const payload = { email, roleToAssign };
  console.log('üì§ Payload:', JSON.stringify(payload, null, 2));
  
  // Validation globale
  const isValid = isValidEmail && isValidRole;
  console.log('');
  console.log(isValid ? '‚úÖ DONN√âES VALIDES' : '‚ùå DONN√âES INVALIDES');
  
  return { isValid, payload };
}

// Tests pr√©d√©finis
console.log('üß™ Tests automatiques:');
console.log('======================');
testInvitation('test@example.com', 'PARENT');
testInvitation('invalid-email', 'PARENT');
testInvitation('test@example.com', 'InvalidRole');

console.log('');
console.log('üîß Testez vos donn√©es:');
console.log('======================');
console.log('testInvitation("votre-email@exemple.com", "PARENT")');
`;

console.log(testCode);

console.log('');
console.log('üîç √âTAPES DE DIAGNOSTIC:');
console.log('========================');
console.log('');
console.log('1Ô∏è‚É£ Copiez le code ci-dessus dans la console (F12)');
console.log('2Ô∏è‚É£ Testez avec vos donn√©es r√©elles');
console.log('3Ô∏è‚É£ Si validation OK, le probl√®me est c√¥t√© backend');
console.log('4Ô∏è‚É£ Si validation KO, corrigez les donn√©es');
console.log('');

console.log('üí° TESTS SP√âCIFIQUES:');
console.log('=====================');
console.log('// Test email valide mais peut-√™tre d√©j√† utilis√©');
console.log('testInvitation("nouveau@test.com", "PARENT")');
console.log('');
console.log('// Test avec diff√©rents r√¥les');
console.log('testInvitation("test@example.com", "STAFF")');
console.log('testInvitation("test@example.com", "SECRETARY")');
console.log('');

console.log('üéØ SI VALIDATION FRONTEND OK:');
console.log('=============================');
console.log('Alors le probl√®me est c√¥t√© backend:');
console.log('‚Ä¢ Email d√©j√† enregistr√© en base');
console.log('‚Ä¢ Invitation existante non expir√©e');
console.log('‚Ä¢ Probl√®me de transformation des donn√©es');
console.log('');

console.log('üõ†Ô∏è SOLUTION RAPIDE - NETTOYAGE BASE:');
console.log('====================================');
console.log('Si vous voulez nettoyer les invitations existantes:');
console.log('1. Ouvrez Prisma Studio: http://localhost:5556');
console.log('2. Table "Invitation" ‚Üí Supprimez les invitations test');
console.log('3. Table "User" ‚Üí V√©rifiez qu\'aucun utilisateur avec cet email existe');
console.log(''); 