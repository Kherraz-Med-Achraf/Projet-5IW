datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* =========================
 * Énumérations
 * ========================= */
enum Role {
  USER
  ADMIN
  TEACHER
  CHILD
  PARENT
  SECRETARY
  DIRECTOR
  SERVICE_MANAGER
  STAFF
}

enum Discipline {
  EDUCATOR
  TECH_EDUCATOR
  PSYCHOLOGIST
  PSYCHIATRIST
  ORTHOPEDIST
}

enum ConsentStatus {
  SECRETARY_PENDING
  PARENT_PENDING
  COMPLETED
  CANCELED
}

/* =========================
 * Utilisateurs et rôles
 * ========================= */
model User {
  id                  String                @id @default(cuid())
  email               String                @unique
  emailVerified       Boolean               @default(false)
  password            String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  otpSecret           String?
  passwordResets      PasswordReset[]
  emailVerifications  EmailVerification[]
  refreshToken        String?
  role                Role                  @default(USER)
  passwordChangedAt   DateTime              @default(now())
  forcePasswordReset  Boolean               @default(false)
  failedLoginAttempts Int                   @default(0)
  lockUntil           DateTime?

  /** relations vers profils spécifiques **/
  parentProfile         ParentProfile?
  childProfile          Child?             @relation(name: "ChildToUser")
  secretaryProfile      SecretaryProfile?
  directorProfile       DirectorProfile?
  serviceManagerProfile ServiceManagerProfile?
  staffProfile          StaffProfile?

  /** relation “enfant référent” **/
  referentOf            Child[]            @relation("ChildReferents")

  /** invitations émises **/
  invitationsSent       Invitation[]       @relation("InvitationInviter")

  /** journaux rédigés **/
  journals              JournalMensuel[]   @relation("JournalEducator")

  /** documents de consentement **/
  secretaryConsents     ConsentDocument[]  @relation("SecretaryConsents")
  parentConsents        ConsentDocument[]  @relation("ParentConsents")
}

/* =========================
 * Processus de sécurité
 * ========================= */
model PasswordReset {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

/* =========================
 * Invitations
 * ========================= */
model Invitation {
  id           String   @id @default(uuid())
  email        String
  token        String   @unique
  roleToAssign Role
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  used         Boolean  @default(false)

  invitedBy    String
  inviter      User     @relation("InvitationInviter", fields: [invitedBy], references: [id], onDelete: Cascade)
}

/* =========================
 * Profils parent/enfant
 * ========================= */
model ParentProfile {
  id                  Int               @id @default(autoincrement())
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String            @unique

  firstName           String
  lastName            String
  phone               String
  address             String
  legalResponsibility String
  notificationPrefs   Json              @default("{}")

  emergencyContacts   EmergencyContact[]
  children            Child[]

  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model Child {
  id               Int             @id @default(autoincrement())
  firstName        String
  lastName         String
  birthDate        DateTime

  parent           ParentProfile   @relation(fields: [parentProfileId], references: [id], onDelete: Cascade)
  parentProfileId  Int

  user             User?           @relation(name: "ChildToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId           String?         @unique

  referents        User[]          @relation("ChildReferents")
  missions         Mission[]
  journals         JournalMensuel[]

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model EmergencyContact {
  id               Int             @id @default(autoincrement())
  name             String
  relation         String
  phone            String
  parent           ParentProfile   @relation(fields: [parentProfileId], references: [id], onDelete: Cascade)
  parentProfileId  Int
}

/* =========================
 * Profils staff / direction
 * ========================= */
model SecretaryProfile {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  specialty    String
  startDate    DateTime
  profileImage String?
  firstName    String
  lastName     String
  birthDate    DateTime
  phone        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model DirectorProfile {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  jobTitle     String
  startDate    DateTime
  profileImage String?
  firstName    String
  lastName     String
  birthDate    DateTime
  phone        String
  specialty    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ServiceManagerProfile {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  jobTitle     String
  startDate    DateTime
  profileImage String?
  firstName    String
  lastName     String
  birthDate    DateTime
  phone        String
  specialty    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model StaffProfile {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String     @unique

  firstName   String
  lastName    String
  phone       String
  birthDate   DateTime

  discipline  Discipline
  specialty   String?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

/* =========================
 * Année scolaire
 * ========================= */
model AcademicYear {
  id        Int               @id @default(autoincrement())
  label     String            @unique
  startDate DateTime
  endDate   DateTime

  missions  Mission[]
  journals  JournalMensuel[]

  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

/* =========================
 * Missions annuelles
 * ========================= */
model Mission {
  id             Int           @id @default(autoincrement())
  description    String
  child          Child         @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId        Int
  academicYear   AcademicYear  @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

/* =========================
 * Journal mensuel
 * ========================= */
model JournalMensuel {
  id                 Int               @id @default(autoincrement())
  child              Child             @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId            Int
  educator           User              @relation("JournalEducator", fields: [educatorId], references: [id])
  educatorId         String
  academicYear       AcademicYear      @relation(fields: [academicYearId], references: [id])
  academicYearId     Int
  month              Int
  isDraft            Boolean           @default(true)
  isSubmitted        Boolean           @default(false)
  submittedAt        DateTime?
  contenu            String?
  progressionMissions Json?
  attachments        JournalAttachment[]

  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

/* =========================
 * Pièces jointes du journal
 * ========================= */
model JournalAttachment {
  id          Int              @id @default(autoincrement())
  journal     JournalMensuel   @relation(fields: [journalId], references: [id], onDelete: Cascade)
  journalId   Int
  filename    String
  filepath    String
  uploadedAt  DateTime         @default(now())
}

/* =========================
 * Documents de consentement
 * ========================= */
model ConsentDocument {
  id            String        @id @default(uuid())
  name          String
  originalPath  String
  signedPath    String?
  status        ConsentStatus @default(SECRETARY_PENDING)
  yousignProcId String?

  secretary     User   @relation("SecretaryConsents", fields: [secretaryId], references: [id], onDelete: Cascade)
  secretaryId   String
  parent        User   @relation("ParentConsents", fields: [parentId], references: [id], onDelete: Cascade)
  parentId      String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
