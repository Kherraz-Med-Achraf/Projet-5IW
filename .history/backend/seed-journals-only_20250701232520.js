const { PrismaClient } = require('@prisma/client');
const { faker } = require('@faker-js/faker');

const prisma = new PrismaClient();

async function seedJournalsOnly() {
  try {
    console.log('üìù G√©n√©ration des journaux mensuels uniquement...');

    // R√©cup√©rer toutes les donn√©es existantes
    const academicYears = await prisma.academicYear.findMany();
    const allChildren = await prisma.child.findMany({ select: { id: true } });
    const allEducators = await prisma.user.findMany({
      where: { role: 'STAFF' },
      select: { id: true }
    });

    console.log(`üìä Donn√©es disponibles :`);
    console.log(`   - ${academicYears.length} ann√©es scolaires`);
    console.log(`   - ${allChildren.length} enfants`);
    console.log(`   - ${allEducators.length} √©ducateurs`);

    // Missions types et contenus journaux (identiques au seed original)
    const missionTemplates = [
      "D√©velopper l'autonomie dans les gestes de la vie quotidienne",
      "Am√©liorer les comp√©tences en communication et expression",
      "Renforcer les apprentissages scolaires fondamentaux",
      "D√©velopper les habilet√©s sociales et relationnelles",
      "Travailler sur la gestion des √©motions et du comportement",
      "Am√©liorer la motricit√© fine et globale",
      "D√©velopper la confiance en soi et l'estime de soi",
      "Acqu√©rir des comp√©tences pr√©professionnelles",
      "Favoriser l'inclusion et la socialisation",
      "D√©velopper la cr√©ativit√© et l'expression artistique"
    ];

    const journalTemplates = [
      "Ce mois-ci, l'enfant a montr√© des progr√®s significatifs dans ses apprentissages. Il participe activement aux ateliers √©ducatifs et d√©montre une meilleure concentration.",
      "L'enfant a travaill√© sur l'autonomie au quotidien. On observe une am√©lioration dans la gestion de ses affaires personnelles et une plus grande ind√©pendance.",
      "Bonne participation aux activit√©s de groupe. L'enfant d√©veloppe ses comp√©tences sociales et s'investit davantage dans les projets collectifs.",
      "Ce mois a √©t√© marqu√© par un travail sp√©cifique sur la communication. L'enfant s'exprime de mieux en mieux et interagit positivement avec ses pairs.",
      "L'enfant a b√©n√©fici√© d'un accompagnement individualis√© qui porte ses fruits. On note une √©volution positive dans son comportement et sa motivation.",
      "Participation assidue aux ateliers cr√©atifs et sportifs. L'enfant d√©couvre de nouveaux centres d'int√©r√™t et d√©veloppe ses talents.",
      "Travail approfondi sur les apprentissages scolaires. L'enfant progresse √† son rythme et gagne en confiance dans ses capacit√©s.",
      "Ce mois a permis de consolider les acquis pr√©c√©dents. L'enfant maintient ses efforts et continue sa progression dans tous les domaines."
    ];

    // G√©n√©rer les missions manquantes pour chaque enfant
    for (const year of academicYears) {
      for (const child of allChildren) {
        const existingMissions = await prisma.mission.findMany({
          where: { childId: child.id, academicYearId: year.id }
        });
        
        if (existingMissions.length === 0) {
          // G√©n√©rer 3-5 missions par enfant par ann√©e
          const missionCount = faker.number.int({ min: 3, max: 5 });
          const selectedMissions = faker.helpers.arrayElements(missionTemplates, missionCount);
          
          for (const missionDesc of selectedMissions) {
            await prisma.mission.create({
              data: {
                description: missionDesc,
                childId: child.id,
                academicYearId: year.id
              }
            });
          }
        }
      }
    }
    console.log('‚úÖ Missions cr√©√©es pour tous les enfants');

    // Logique de g√©n√©ration des journaux (identique au seed principal)
    const currentDate = new Date();
    const currentYear = currentDate.getFullYear();
    const currentMonth = currentDate.getMonth() + 1;
    
    const periods = [];
    
    const currentAcademicYear = currentMonth >= 9 ? `${currentYear}-${currentYear + 1}` : `${currentYear - 1}-${currentYear}`;
    const previousAcademicYear = currentMonth >= 9 ? `${currentYear - 1}-${currentYear}` : `${currentYear - 2}-${currentYear - 1}`;
    const [prevStartYear, prevEndYear] = previousAcademicYear.split('-').map(Number);
    
    // Ann√©e scolaire pr√©c√©dente compl√®te
    for (let month = 9; month <= 12; month++) {
      periods.push({ year: prevStartYear, month, academicYear: previousAcademicYear });
    }
    for (let month = 1; month <= 8; month++) {
      periods.push({ year: prevEndYear, month, academicYear: previousAcademicYear });
    }
    
    // Ann√©e scolaire actuelle jusqu'au mois pr√©c√©dent
    const [currentStartYear, currentEndYear] = currentAcademicYear.split('-').map(Number);
    
    if (currentMonth >= 9) {
      for (let month = 9; month < currentMonth; month++) {
        periods.push({ year: currentYear, month, academicYear: currentAcademicYear });
      }
    } else {
      for (let month = 9; month <= 12; month++) {
        periods.push({ year: currentStartYear, month, academicYear: currentAcademicYear });
      }
      for (let month = 1; month < currentMonth; month++) {
        periods.push({ year: currentYear, month, academicYear: currentAcademicYear });
      }
    }
    
    console.log(`‚ÑπÔ∏è  G√©n√©ration des journaux pour ${periods.length} mois`);

    if (allEducators.length === 0) {
      console.log('‚ö†Ô∏è  Aucun staff trouv√© pour assigner comme √©ducateur');
      return;
    }

    let educatorIndex = 0;
    let journalsCreated = 0;
    
    for (const child of allChildren) {
      const assignedEducator = allEducators[educatorIndex % allEducators.length];
      educatorIndex++;
      
      for (const { year, month, academicYear: academicYearLabel } of periods) {
        const academicYear = academicYears.find(ay => ay.label === academicYearLabel);
        
        if (!academicYear) {
          console.log(`‚ö†Ô∏è  Ann√©e scolaire ${academicYearLabel} non trouv√©e pour ${month}/${year}`);
          continue;
        }
        
        const existingJournal = await prisma.journalMensuel.findFirst({
          where: {
            childId: child.id,
            academicYearId: academicYear.id,
            month: month
          }
        });
        
        if (!existingJournal) {
          const childMissions = await prisma.mission.findMany({
            where: { childId: child.id, academicYearId: academicYear.id }
          });
          
          const progressionMissions = childMissions.reduce((acc, mission) => {
            acc[mission.id] = {
              progression: faker.helpers.arrayElement([
                "En cours de travail",
                "Objectif en cours d'acquisition",
                "Progr√®s observ√©s",
                "Objectif partiellement atteint",
                "Objectif atteint"
              ]),
              commentaire: faker.helpers.arrayElement([
                "L'enfant montre de l'int√©r√™t et s'investit dans cette mission.",
                "Des progr√®s sont observ√©s, il faut poursuivre les efforts.",
                "Cette mission n√©cessite un accompagnement renforc√©.",
                "L'enfant a bien int√©gr√© les objectifs de cette mission.",
                "Excellent travail, l'enfant d√©passe nos attentes."
              ])
            };
            return acc;
          }, {});
          
          // NOUVELLE LOGIQUE AM√âLIOR√âE selon l'anciennet√©
          const monthDate = new Date(year, month - 1, 15);
          const monthsAgo = Math.max(0, Math.floor((currentDate.getTime() - monthDate.getTime()) / (1000 * 60 * 60 * 24 * 30)));
          
          let submissionProbability = 0.3; // base 30%
          if (monthsAgo > 6) submissionProbability = 0.95; // tr√®s anciens: 95%
          else if (monthsAgo > 3) submissionProbability = 0.80; // anciens: 80%
          else if (monthsAgo > 1) submissionProbability = 0.60; // r√©cents: 60%
          
          const isSubmitted = faker.datatype.boolean(submissionProbability);
          const isDraft = !isSubmitted && faker.datatype.boolean(0.7); // 70% des non-soumis sont en draft
          
          await prisma.journalMensuel.create({
            data: {
              childId: child.id,
              educatorId: assignedEducator.id,
              academicYearId: academicYear.id,
              month: month,
              isDraft: isDraft,
              isSubmitted: isSubmitted,
              submittedAt: isSubmitted ? faker.date.between({
                from: new Date(year, month - 1, 20),
                to: new Date(year, month, 5)
              }) : null,
              contenu: faker.helpers.arrayElement(journalTemplates),
              progressionMissions: progressionMissions
            }
          });
          
          journalsCreated++;
        }
      }
    }
    console.log(`‚úÖ ${journalsCreated} journaux mensuels cr√©√©s avec la nouvelle logique !`);
    
  } catch (error) {
    console.error('‚ùå Erreur :', error);
  } finally {
    await prisma.$disconnect();
  }
}

seedJournalsOnly(); 