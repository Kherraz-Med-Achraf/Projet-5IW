// ─── DATABASE & GENERATOR ─────────────────────────────────────────────────────
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ─── UTILISATEUR ───────────────────────────────────────────────────────────────
model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  emailVerified       Boolean        @default(false)
  password            String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  otpSecret           String?
  passwordResets      PasswordReset[]
  emailVerifications  EmailVerification[]
  refreshToken        String?
  role                Role           @default(USER)
  passwordChangedAt   DateTime       @default(now())
  forcePasswordReset  Boolean        @default(false)
  failedLoginAttempts Int            @default(0)
  lockUntil           DateTime?
  parentProfile       ParentProfile?
  childProfile        Child?         @relation(fields: [childProfileId], references: [id])
  childProfileId      Int?           @unique
}

// ─── MOT DE PASSE OUBLIÉ ───────────────────────────────────────────────────────
model PasswordReset {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

// ─── VÉRIFICATION D’E-MAIL ─────────────────────────────────────────────────────
model EmailVerification {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

// ─── RÔLES ─────────────────────────────────────────────────────────────────────
enum Role {
  USER
  ADMIN
  TEACHER
  CHILD
}

// ─── PROFIL PARENT ─────────────────────────────────────────────────────────────
model ParentProfile {
  id                  Int             @id @default(autoincrement())
  user                User            @relation(fields: [userId], references: [id])
  userId              String          @unique
  firstName           String
  lastName            String
  phone               String
  address             String
  legalResponsibility String
  notificationPrefs   Json            @default("{}")
  emergencyContacts   EmergencyContact[]
  children            Child[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

// ─── ENFANT(S) ─────────────────────────────────────────────────────────────────
model Child {
  id               Int             @id @default(autoincrement())
  firstName        String
  lastName         String
  birthDate        DateTime
  condition        String?
  parent           ParentProfile   @relation(fields: [parentProfileId], references: [id])
  parentProfileId  Int
  user             User?           @relation(fields: [userId], references: [id])
  userId           String?         @unique
}

// ─── CONTACT(S) D’URGENCE ──────────────────────────────────────────────────────
model EmergencyContact {
  id               Int             @id @default(autoincrement())
  name             String
  relation         String
  phone            String
  parent           ParentProfile   @relation(fields: [parentProfileId], references: [id])
  parentProfileId  Int
}
