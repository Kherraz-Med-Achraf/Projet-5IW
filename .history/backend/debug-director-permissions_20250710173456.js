const { PrismaClient } = require('@prisma/client');

async function debugDirectorPermissions() {
  const prisma = new PrismaClient();

  try {
    console.log('üîç DIAGNOSTIC PERMISSIONS DIRECTOR');
    console.log('==================================');
    
    // 1. Chercher tous les utilisateurs Director
    console.log('1Ô∏è‚É£ Recherche des utilisateurs DIRECTOR...');
    const directors = await prisma.user.findMany({
      where: { role: 'DIRECTOR' },
      include: {
        directorProfile: true
      }
    });
    
    console.log(`‚úÖ Trouv√© ${directors.length} directeur(s):`);
    directors.forEach(director => {
      console.log(`   üìã ID: ${director.id}`);
      console.log(`   üìß Email: ${director.email}`);
      console.log(`   üéØ R√¥le: ${director.role}`);
      console.log(`   ‚úÖ Email v√©rifi√©: ${director.emailVerified}`);
      console.log(`   üë§ Profil: ${director.directorProfile ? 
        `${director.directorProfile.firstName} ${director.directorProfile.lastName}` : 
        'Pas de profil'}`);
      console.log('   ---');
    });

    // 2. V√©rifier les r√¥les autoris√©s pour les invitations
    console.log('2Ô∏è‚É£ R√¥les autoris√©s pour les invitations:');
    console.log('   ‚úÖ SERVICE_MANAGER');
    console.log('   ‚úÖ DIRECTOR');
    console.log('   ‚úÖ ADMIN');
    console.log('');

    // 3. Tester une requ√™te d'invitation simul√©e
    console.log('3Ô∏è‚É£ Test de permissions:');
    const testRoles = ['SERVICE_MANAGER', 'DIRECTOR', 'ADMIN'];
    
    testRoles.forEach(role => {
      const isAuthorized = testRoles.includes(role);
      console.log(`   ${isAuthorized ? '‚úÖ' : '‚ùå'} ${role}: ${isAuthorized ? 'AUTORIS√â' : 'REFUS√â'}`);
    });

    // 4. V√©rifier les invitations existantes
    console.log('');
    console.log('4Ô∏è‚É£ Invitations existantes...');
    const invitations = await prisma.invitation.findMany({
      include: {
        inviter: {
          select: { email: true, role: true }
        }
      },
      orderBy: { createdAt: 'desc' },
      take: 5
    });

    console.log(`‚úÖ Derni√®res ${invitations.length} invitations:`);
    invitations.forEach(inv => {
      console.log(`   üìß ${inv.email} ‚Üí ${inv.roleToAssign}`);
      console.log(`   üë§ Invit√© par: ${inv.inviter.email} (${inv.inviter.role})`);
      console.log(`   üìÖ ${inv.createdAt.toLocaleDateString()}`);
      console.log('   ---');
    });

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// Instructions de test
console.log('üß™ TESTS √Ä EFFECTUER APR√àS CE DIAGNOSTIC:');
console.log('==========================================');
console.log('1. V√©rifiez que votre utilisateur DIRECTOR appara√Æt dans la liste');
console.log('2. Connectez-vous avec ce compte');
console.log('3. Ouvrez la console navigateur (F12)');
console.log('4. Tapez: localStorage.getItem("token")');
console.log('5. Copiez le token et d√©codez-le sur jwt.io');
console.log('6. V√©rifiez que le r√¥le dans le token = DIRECTOR');
console.log('');

debugDirectorPermissions(); 