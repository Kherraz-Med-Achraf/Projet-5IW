datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* =========================
 * Utilisateurs et rôles
 * ========================= */
model User {
  id                  String                @id @default(cuid())
  email               String                @unique
  emailVerified       Boolean               @default(false)
  password            String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt()
  otpSecret           String?
  passwordResets      PasswordReset[]
  emailVerifications  EmailVerification[]
  refreshToken        String?
  role                Role                  @default(USER)
  passwordChangedAt   DateTime              @default(now())
  forcePasswordReset  Boolean               @default(false)
  failedLoginAttempts Int                   @default(0)
  lockUntil           DateTime?

  /** relations vers profils spécifiques **/
  parentProfile         ParentProfile?
  childProfile          Child?           @relation(name: "ChildToUser")
  secretaryProfile      SecretaryProfile?
  directorProfile       DirectorProfile?
  serviceManagerProfile ServiceManagerProfile?
  staffProfile          StaffProfile?

  /** relation “enfant référent” (plusieurs enfants peuvent référer à un User) **/
  referentOf            Child[]          @relation("ChildReferents")

  /** relation “invitations émises” **/
  invitationsSent       Invitation[]     @relation("InvitationInviter")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

/** 
 * Nouveau modèle “Invitation” 
 * Pour gérer les liens d’envoi d’invitations (inscription par token)
 */
model Invitation {
  id           String   @id @default(uuid())
  email        String   // e-mail cible de l’invitation
  token        String   @unique
  roleToAssign Role     // rôle qui sera attribué après inscription
  createdAt    DateTime @default(now())
  expiresAt    DateTime // date d’expiration du lien
  used         Boolean  @default(false)

  invitedBy    String   // id du User qui a généré l’invitation
  inviter      User     @relation("InvitationInviter", fields: [invitedBy], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  TEACHER
  CHILD
  PARENT
  SECRETARY
  DIRECTOR
  SERVICE_MANAGER
  STAFF
}

enum Discipline {
  EDUCATOR
  TECH_EDUCATOR
  PSYCHOLOGIST
  PSYCHIATRIST
  ORTHOPEDIST
}

/* =========================
 * Profils parent/enfant
 * ========================= */
model ParentProfile {
  id                  Int               @id @default(autoincrement())
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String            @unique

  firstName           String
  lastName            String
  phone               String
  address             String
  legalResponsibility String
  notificationPrefs   Json              @default("{}")

  emergencyContacts   EmergencyContact[]
  children            Child[]

  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt()
}

model Child {
  id               Int             @id @default(autoincrement())
  firstName        String
  lastName         String
  birthDate        DateTime

  parent           ParentProfile   @relation(fields: [parentProfileId], references: [id], onDelete: Cascade)
  parentProfileId  Int

  user             User?           @relation(name: "ChildToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId           String?         @unique

  /** plusieurs référents possibles **/
  referents        User[]          @relation("ChildReferents")

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt()
}

model EmergencyContact {
  id               Int             @id @default(autoincrement())
  name             String
  relation         String
  phone            String
  parent           ParentProfile   @relation(fields: [parentProfileId], references: [id], onDelete: Cascade)
  parentProfileId  Int
}

/* =========================
 * Profils staff / direction
 * ========================= */
model SecretaryProfile {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  specialty    String
  startDate    DateTime
  profileImage String?
  firstName    String
  lastName     String
  birthDate    DateTime
  phone        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
}

model DirectorProfile {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  jobTitle     String
  startDate    DateTime
  profileImage String?
  firstName    String
  lastName     String
  birthDate    DateTime
  phone        String
  specialty    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
}

model ServiceManagerProfile {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  jobTitle     String
  startDate    DateTime
  profileImage String?
  firstName    String
  lastName     String
  birthDate    DateTime
  phone        String
  specialty    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
}

model StaffProfile {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String     @unique

  firstName   String
  lastName    String
  phone       String
  birthDate   DateTime

  discipline  Discipline
  specialty   String?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()
}
